.TH "mbuffer" "1" "20060217" "Thomas Maier-Komor" "console utility"
.SH "NAME"
mbuffer \- measuring buffer
.SH "SYNTAX"
.LP 
mbuffer [\fIoptions\fP]
.SH "DESCRIPTION"
.LP 
mbuffer buffers i/o operations and displays the throughput rate. It is
multithreaded, supports network connections, and offers more options
than the standard buffer.
.SH "OPTIONS"
.LP 
.TP 
\fB\-i\fR <\fIfilename\fP>
use \fIfilename\fP as input instead of the standard input (needs to be
given for multi volume support)
.TP 
\fB\-I\fR <\fIport\fP>
use network port \fIport\fP as input instead of the standard input. If
given a hostname and a port in the form hostname:port the first interface 
with the IP of hostname will be used.
.TP 
\fB\-o\fR <\fIfilename\fP>
use \fIfilename\fP as output instead of the standard output (needs to be
given for multi volume support, will enable use of sendfile if available)
.TP 
\fB\-O\fR <\fIhostname:port\fP>
write output to \fIhostname:port\fP instead of the standard output (will
enable use of sendfile if available)
.TP 
\fB\-b\fR <\fInum\fP>
use \fInum\fP blocks for buffer (default 256)
.TP 
\fB\-s\fR <\fIsize\fP>
use blocks of \fIsize\fP bytes for buffer (default 10240)
.TP 
\fB\-m\fR <\fIsize\fP>
use a total of \fIsize\fP bytes for buffer (default 2MB) - size can be
set with a trailing charakter (b and B for Byte, k for kByte, M for
MByte, G for Gigabyte, and with % for a percentage of total physical 
memory
.TP 
\fB\-L\f
lock buffer in memory - this option is not available for file-based buffers and requires mbuffer to be setuid root (use with care)
.TP 
\fB\-n\fR <\fInum\fP>
\fInum\fP volumes in input device (requires use of option \-i for input device specification) [currently multi volume support is EXPERIMENTAL]
.TP 
\fB\-t\fR
use a memory mapped temporaray file as buffer (use with huge buffers)
.TP 
\fB\-T\fR <\fIfile\fP>
as \-t but use \fIfile\fP instead
.TP 
\fB\-d\fR
use blocksize of device for output (needed for some devices, slows output down)
.TP 
\fB\-P\fR <\fInum\fP>
start writing after the buffer has been filled to \fInum\fP% (default 0 \- start at once)
.TP 
\fB\-p\fR <\fInum\fP>
start reading after the buffer has dropped below fillratio of \fInum\fP% (default 100 \- start at once)
.TP 
\fB\-l\fR <\fIfile\fP>
log messages to \fIfile\fP instead of standard error output
.TP 
\fB\-u\fR <\fInum\fP>
pause \fInum\fP microseconds after each write \- might increase performance on some drives with very low performace (< 1 MB/sec)
.TP 
\fB\-A\fR <\fIcmd\fP>
used devices is an autoloader which uses \fIcmd\fP to load the next volume
.TP 
\fB\-a\fR <\fItime\fP>
used device is an autoloader which takes \fItime\fP seconds to load a new tape
.TP 
\fB\-f\fR
overwrite output file if it exists already
.TP 
\fB\-v\fR <\fInum\fP>
set verbose level to \fInum\fP. Valid values are 0..5 (0 = none, 1 = errors, 2 = warnings, 4 = informations, 5 = debugging informations). Higher values include lower values messages.
.TP 
\fB\-q\fR
quiet \- do not display the status on the standard error output
.TP 
\fB\-h, \-\-help\fR
Output help information and exit.
.TP 
\fB\-H, \-\-md5\fR
Generate md5 hash of transfered data.
.TP 
\fB\-V, \-\-version\fR
Output version information and exit.
.SH "ENVIRONMENT VARIABLES"
If TMPDIR is set, mbuffer allocates storage for file based buffers in this
directory\&. If TMPDIR is unset \fI/var/tmp\fR will be used\&.
.SH "FILES"
.LP 
\fI/usr/local/bin/mbuffer\fP 
.br 
\fI/var/tmp/mbuffer-*\fP 
.SH "EXAMPLES"
.LP 
To run this program with the default options just type:
.LP 
mbuffer
.LP 
Using mbuffer to do a backup with tar to the default tape device. Options for this example: memory mapped temporary file with a size of 10 Megabytes, start after 80% of the buffer have been filled.
.LP 
tar cf \- mydirectory | gzip | mbuffer \-t \-m 10M \-p 80 \-f \-o $TAPE
.LP 
Using mbuffer with 3 tapes for input and extracting the contents in the current work directory:
.LP 
mbuffer \-n 3 \-i $TAPE | gzip \-dc | tar xf \-
.LP 
Using mbuffer to write to multiple tape volumes:
.LP 
tar cf \- /usr | mbuffer \-f \-o $TAPE
.LP 
Write to multiple tapes and erase every tape before writing:
.LP 
tar cf \- /usr | mbuffer \-A "echo next tape; read a < /dev/tty; mt erase $TAPE" \-f \-o $TAPE
.LP
Making a backup via network:
.LP 
\fItape server: \fPmbuffer \-I 8000 \-f \-o $TAPE
.LP 
\fIbackup client: \fPtar zcf \- /home | mbuffer \-O tapeserver:8000
.SH "AUTHORS"
.LP 
Thomas Maier\-Komor <software@maier\-komor.de>

.SH "SEE ALSO"
.LP 
buffer(1)
